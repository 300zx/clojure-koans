(doc cons)
(doc conj)
(pop '())
(subvec [:0 :1 :2 :3] 1 3)
(set '(1 1 2 2 3 3 4 4 5 5))
((fn [f] (f 4 5)) *)
((fn [f] (f 4 5)) +)
(empty? ())
(map nil? [:a :b nil :c :d])
(doc filter)
(map (fn [x] (* x 10)) [1 2 3 4])
(reduce (fn [a b] (*a b)) [10 20 30 40])
(reduce (fn [a b] (* a b)) [10 20 30 40])
(reduce (fn [a b] (if (< a b) b a)) ["which
(reduce (fn [a b] (if (< a b) b a)) ["which" "word" "is" "longer"])
(reduce (fn [a b] (if (< b a) b a)) ["which" "word" "is" "longer"])
(reduce (fn [a b] (if (< (count b) (count a) b a)) ["which" "word" "is" "longer"])
(reduce (fn [a b] (if (< (count b) (count a) b a)) ["which" "word" "is" "longer"]))
(reduce (fn [a b] (if (< ((count b) (count a)) b a)) ["which" "word" "is" "longer"]))
(reduce (fn [a b] (if (< (count b) (count a) b a)) ["which" "word" "is" "longer"])
(reduce (fn [a b] (if (< (count b) (count a) b a)) ["which" "word" "is" "longer"]))
(reduce (fn [a b] (if (< (count b) (count a)) b a)) ["which" "word" "is" "longer"])
(reduce (fn [a b] (if (< (count a) (count b)) b a)) ["which" "word" "is" "longer"])
